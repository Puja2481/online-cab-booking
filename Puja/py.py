""" py.py --

 UI generated by GUI Builder Build 146 on 2019-11-09 13:59:23 from:
    C:/Users/puja/Desktop/py.ui
 This file is auto-generated.  Only the code within
    '# BEGIN USER CODE (global|class)'
    '# END USER CODE (global|class)'
 and code inside the callback subroutines will be round-tripped.
 The 'main' function is reserved.
"""

from tkinter import *
from py_ui import Py

# BEGIN USER CODE global

# END USER CODE global

class CustomPy(Py):
    pass

    # BEGIN CALLBACK CODE
    # ONLY EDIT CODE INSIDE THE def FUNCTIONS.

    # _button_1_command --
    #
    # Callback to handle _button_1 widget option -command
    def _button_1_command(self, *args):
        pass

    # _entry_1_invalidcommand --
    #
    # Callback to handle _entry_1 widget option -invalidcommand
    def _entry_1_invalidcommand(self, *args):
        pass

    # _entry_1_validatecommand --
    #
    # Callback to handle _entry_1 widget option -validatecommand
    def _entry_1_validatecommand(self, *args):
        pass

    # _entry_1_xscrollcommand --
    #
    # Callback to handle _entry_1 widget option -xscrollcommand
    def _entry_1_xscrollcommand(self, *args):
        pass

    # _radiobutton_2_command --
    #
    # Callback to handle _radiobutton_2 widget option -command
    def _radiobutton_2_command(self, *args):
        pass

    # _radiobutton_3_command --
    #
    # Callback to handle _radiobutton_3 widget option -command
    def _radiobutton_3_command(self, *args):
        pass

    # _radiobutton_4_command --
    #
    # Callback to handle _radiobutton_4 widget option -command
    def _radiobutton_4_command(self, *args):
        pass

    # destinationspinner_command --
    #
    # Callback to handle destinationspinner widget option -command
    def destinationspinner_command(self, *args):
        pass

    # destinationspinner_invalidcommand --
    #
    # Callback to handle destinationspinner widget option -invalidcommand
    def destinationspinner_invalidcommand(self, *args):
        pass

    # destinationspinner_validatecommand --
    #
    # Callback to handle destinationspinner widget option -validatecommand
    def destinationspinner_validatecommand(self, *args):
        pass

    # destinationspinner_xscrollcommand --
    #
    # Callback to handle destinationspinner widget option -xscrollcommand
    def destinationspinner_xscrollcommand(self, *args):
        pass

    # fromspinner_command --
    #
    # Callback to handle fromspinner widget option -command
    def fromspinner_command(self, *args):
        pass

    # fromspinner_invalidcommand --
    #
    # Callback to handle fromspinner widget option -invalidcommand
    def fromspinner_invalidcommand(self, *args):
        pass

    # fromspinner_validatecommand --
    #
    # Callback to handle fromspinner widget option -validatecommand
    def fromspinner_validatecommand(self, *args):
        pass

    # fromspinner_xscrollcommand --
    #
    # Callback to handle fromspinner widget option -xscrollcommand
    def fromspinner_xscrollcommand(self, *args):
        pass

    # name_invalidcommand --
    #
    # Callback to handle name widget option -invalidcommand
    def name_invalidcommand(self, *args):
        pass

    # name_validatecommand --
    #
    # Callback to handle name widget option -validatecommand
    def name_validatecommand(self, *args):
        pass

    # name_xscrollcommand --
    #
    # Callback to handle name widget option -xscrollcommand
    def name_xscrollcommand(self, *args):
        pass

    # END CALLBACK CODE

    # BEGIN USER CODE class

    # END USER CODE class

def main():
    root = Tk()
    demo = CustomPy(root)
    root.title('main')
    root.mainloop()

if __name__ == '__main__': main()
